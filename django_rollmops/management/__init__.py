"""
Creates permissions for all installed apps models fields that need permissions.
"""

from django.apps import apps as global_apps
from django.contrib.auth import get_permission_codename
from django.db import DEFAULT_DB_ALIAS, router


def _get_all_permissions(opts):
    """
    Return (codename, name) for all permissions in the given model options.
    """
    builtin = _get_builtin_permissions(opts)
    custom = list(opts.permissions)
    fields = _get_builtin_field_permissions(opts)
    return builtin + custom + fields


def _get_builtin_permissions(opts):
    """
    Return (codename, name) for all autogenerated permissions.
    By default, this is ('add', 'change', 'delete')
    """
    perms = []
    for action in opts.default_permissions:
        perms.append((
            get_permission_codename(action, opts),
            'Can %s %s' % (action, opts.verbose_name_raw)
        ))
    return perms


def _get_field_permission_codename(action, opts, field_name):
    """
    Return the codename of the permission for the specified action.
    """
    return '%s_%s__%s' % (action, opts.model_name, field_name)


def _get_field_choice_permission_codename(action, opts, field_name, choice_name):
    """
    Return the codename of the permission for the specified action.
    """
    return '%s_%s__%s___%s' % (action, opts.model_name, field_name, choice_name)


def _get_builtin_field_permissions(opts):
    """
    Return (codename, name) for all autogenerated permissions.
    By default, this is ('add', 'change', 'delete')
    """
    perms = []
    for field in opts.get_fields():
        for action in opts.default_permissions:
            choices = getattr(field, 'choices', None)
            if choices:
                for choice_code, _ in choices:
                    perms.append((_get_field_choice_permission_codename(action, opts, field.name, choice_code), 'Can %s %s %s field %s choice' % (action, opts.verbose_name_raw, field.name, choice_code)))
            else:
                perms.append((_get_field_permission_codename(action, opts, field.name), 'Can %s %s %s field' % (action, opts.verbose_name_raw, field.name)))
    return perms


def create_permissions(app_config, verbosity=2, interactive=True, using=DEFAULT_DB_ALIAS, apps=global_apps, **kwargs):
    if not app_config.models_module:
        return

    app_label = app_config.label
    try:
        app_config = apps.get_app_config(app_label)
        ContentType = apps.get_model('contenttypes', 'ContentType')
        Permission = apps.get_model('auth', 'Permission')
    except LookupError:
        return

    if not router.allow_migrate_model(using, Permission):
        return

    # This will hold the permissions we're looking for as
    # (content_type, (codename, name))
    searched_perms = []
    # The codenames and ctypes that should exist.
    ctypes = set()
    for klass in app_config.get_models():
        # Force looking up the content types in the current database
        # before creating foreign keys to them.
        ctype = ContentType.objects.db_manager(using).get_for_model(klass)

        ctypes.add(ctype)
        for perm in _get_all_permissions(klass._meta):
            searched_perms.append((ctype, perm))

    # Find all the Permissions that have a content_type for a model we're
    # looking for.  We don't need to check for codenames since we already have
    # a list of the ones we're going to create.
    all_perms = set(Permission.objects.using(using).filter(
        content_type__in=ctypes,
    ).values_list(
        "content_type", "codename"
    ))

    perms = [
        Permission(codename=codename, name=name, content_type=ct)
        for ct, (codename, name) in searched_perms
        if (ct.pk, codename) not in all_perms
    ]
    Permission.objects.using(using).bulk_create(perms)
    if verbosity >= 2:
        for perm in perms:
            print("Adding permission '%s'" % perm)
